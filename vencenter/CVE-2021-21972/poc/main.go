package main

import (
	"bufio"
	"crypto/tls"
	"fmt"
	"io"
	"net/http"
	"os"
	"strings"
	"time"
)

func main() {
	var urlList []string
	urlList = fileRead("/Users/leefz/Downloads/vcenter.txt")
	for i := 0; i < len(urlList); i++ {
		err := GetUrlInfo(urlList[i])
		if err != nil {
			continue
		}
	}

}

func GetUrlInfo(url string) error {
	url = url + "/ui/vropspluginui/rest/services/uploadova"
	tr := &http.Transport{
		//不验证https
		TLSClientConfig: &tls.Config{InsecureSkipVerify: true},
	}
	client := &http.Client{Timeout: 10 * time.Second, Transport: tr}
	request, err := http.NewRequest("GET", url, nil)
	if err != nil {
		fmt.Println(err)
		return err
	}
	request.Header.Add("User-Agent", "chrome")
	response, err := client.Do(request)
	if err != nil {
		fmt.Println(err)
		return err
	} else {
		defer response.Body.Close()
	}
	code := response.StatusCode
	if code == 405 {
		fmt.Printf("[+]漏洞存在 %s\n", url)
	}
	return nil
}

func fileRead(path string) []string {
	var urlPath []string
	file, err := os.OpenFile(path, os.O_RDWR, 0666)
	if err != nil {
		fmt.Println("Open file fail", err)
	}
	defer file.Close()
	buf := bufio.NewReader(file)
	for {
		line, err := buf.ReadString('\n')
		line = strings.TrimSpace(line)
		urlPath = append(urlPath, line)
		if err != nil {
			if err == io.EOF {
				fmt.Println("file read over")
				break
			} else {
				fmt.Println("read file error", err)
				break
			}
		}
	}
	return urlPath
}
